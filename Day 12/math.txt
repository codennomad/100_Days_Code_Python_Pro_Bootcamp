def is_prime(num):
    if num <= 1:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True



1. range(2, int(num ** 0.5) + 1)
range(2, ...):
O loop começa com o número 2 porque todos os números são divisíveis por 1, e 1 não é relevante para identificar números primos.

num ** 0.5:
Isso calcula a raiz quadrada de num. Por exemplo:

Se num for 16, então 16 ** 0.5 é 4.
Se num for 25, então 25 ** 0.5 é 5.
int(num ** 0.5):
A raiz quadrada de num pode ser um número decimal. O int() converte esse valor para um número inteiro, descartando a parte decimal.

int(num ** 0.5) + 1:
Como o final do intervalo no range não é incluído, adicionamos +1 para garantir que o último número (a raiz quadrada arredondada para cima) seja testado como divisor.


2. Por que testar até a raiz quadrada?
Em matemática, se um número num não é primo, ele pode ser escrito como o produto de dois fatores:

                            𝑛𝑢𝑚=𝑎×𝑏

Se ambos os fatores a e b forem maiores que a raiz quadrada de num, o produto a \times b será maior que num, o que é impossível.
Portanto, se num tem divisores além de 1 e ele mesmo, pelo menos um desses divisores será menor ou igual à raiz quadrada de num.
Isso reduz o número de divisões necessárias, tornando o algoritmo mais eficiente.

3. Exemplo prático
Suponha que queremos verificar se num = 37 é primo:

Valores calculados:
Raiz quadrada de 37:
37≈6.08

​

O int() arredonda para baixo:

int(6.08)=6

O loop for i in range(2, int(num ** 0.5) + 1) será equivalente a:

for i in range(2, 7):  # i será 2, 3, 4, 5, 6


Testes:
37 % 2 != 0
37 % 3 != 0
37 % 4 != 0
37 % 5 != 0
37 % 6 != 0
Nenhum número no intervalo divide 37. Portanto, ele é primo.

4. Resumo
A expressão for i in range(2, int(num ** 0.5) + 1) é eficiente porque:

Testa apenas divisores relevantes, ignorando números maiores que a raiz quadrada.
Reduz o número de cálculos em comparação a verificar todos os números até num - 1.